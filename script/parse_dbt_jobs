#!/bin/bash
# This script will parse the list jobs JSON response from the DBT Cloud API
# path /api/v2/accounts/[id]/jobs/

# Default configuration file path
CONFIG_FILE="config.json"

# Function to load configuration from JSON file
load_config() {
  local config_file="$1"
  if [ -f "$config_file" ]; then
    echo "Loading configuration from: $config_file"
    # Use jq to extract values and export them as environment variables
    export PROD_ENV_ID=$(jq -r '.prod_env_id // empty' "$config_file" 2>/dev/null)
    export PREPROD_ENV_ID=$(jq -r '.preprod_env_id // empty' "$config_file" 2>/dev/null)
    export ACCOUNT_ID=$(jq -r '.account_id // empty' "$config_file" 2>/dev/null)
    export BEARER_TOKEN=$(jq -r '.bearer_token // empty' "$config_file" 2>/dev/null)
    export OUTPUT_FILE=$(jq -r '.output_file // empty' "$config_file" 2>/dev/null)
    
    # Check if required values were loaded
    if [ -z "$ACCOUNT_ID" ] || [ -z "$BEARER_TOKEN" ]; then
      echo "ERROR: Required values 'account_id' and 'bearer_token' not found in config file"
      exit 1
    fi
    
    echo "Configuration loaded successfully"
    return 0
  else
    return 1
  fi
}

# Function to display usage information
show_usage() {
  echo "Usage: $0 [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  -c, --config FILE    Use configuration file (default: $CONFIG_FILE)"
  echo "  -a, --account ID     DBT Cloud account ID"
  echo "  -t, --token TOKEN    DBT Cloud API bearer token"
  echo "  -o, --output FILE    Output CSV file"
  echo "  -p, --prod-id ID     Production environment ID"
  echo "  -r, --preprod-id ID  Pre-production environment ID"
  echo "  -h, --help           Show this help message"
  echo ""
  echo "Examples:"
  echo "  $0 -c dbt_config.json                    # Use config file"
  echo "  $0 -a 21744 -t 'your_token' -p 38094 -r 38096 # Use CLI arguments"
  echo ""
  echo "Configuration file format (JSON):"
  echo "  {"
  echo "    \"account_id\": \"21744\","
  echo "    \"bearer_token\": \"your_token_here\","
  echo "    \"prod_env_id\": <prod_env_id_number,"
  echo "    \"preprod_env_id\": <preprod_env_id_number,"
  echo "    \"output_file\": \"custom_output.csv\""
  echo "  }"
}

# Parse command line arguments
PROD_ENV_ID=${PROD_ENV_ID:-38094}
PREPROD_ENV_ID=${PREPROD_ENV_ID:-38096}
ACCOUNT_ID=""
BEARER_TOKEN=""
OUTPUT_FILE=""
USE_CONFIG=false

while [[ $# -gt 0 ]]; do
  case $1 in
    -c|--config)
      CONFIG_FILE="$2"
      USE_CONFIG=true
      shift 2
      ;;
    -a|--account)
      ACCOUNT_ID="$2"
      shift 2
      ;;
    -t|--token)
      BEARER_TOKEN="$2"
      shift 2
      ;;
    -o|--output)
      OUTPUT_FILE="$2"
      shift 2
      ;;
    -p|--prod-id)
      PROD_ENV_ID="$2"
      shift 2
      ;;
    -r|--preprod-id)
      PREPROD_ENV_ID="$2"
      shift 2
      ;;
    -h|--help)
      show_usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      show_usage
      exit 1
      ;;
  esac
done

# Load configuration from file if requested
if [ "$USE_CONFIG" = true ]; then
  if load_config "$CONFIG_FILE"; then
    echo "Using configuration from: $CONFIG_FILE"
  else
    echo "ERROR: Configuration file not found: $CONFIG_FILE"
    echo "Please create a valid configuration file or use CLI arguments instead."
    show_usage
    exit 1
  fi
elif [ -n "$ACCOUNT_ID" ] || [ -n "$BEARER_TOKEN" ]; then
  echo "Using CLI arguments for configuration"
  if [ -z "$ACCOUNT_ID" ] || [ -z "$BEARER_TOKEN" ]; then
    echo "ERROR: Both account_id (-a) and bearer_token (-t) are required when using CLI arguments"
    show_usage
    exit 1
  fi
else
  echo "ERROR: No configuration method specified"
  echo "Please either:"
  echo "  1. Use a configuration file: $0 -c dbt_config.json"
  echo "  2. Provide CLI arguments: $0 -a <account_id> -t <bearer_token>"
  show_usage
  exit 1
fi

# Validate required parameters
if [ -z "$ACCOUNT_ID" ] || [ -z "$BEARER_TOKEN" ]; then
  echo "ERROR: Both account_id and bearer_token are required"
  show_usage
  exit 1
fi

# Set variables for use in the script
account_id="$ACCOUNT_ID"
bearer_token="$BEARER_TOKEN"
output_file="$OUTPUT_FILE"


# Set default output filename if not provided
if [ -z "$output_file" ]; then
  timestamp=$(date +"%Y%m%d_%H%M%S")
  output_file="dbt_jobs_audit/dbt_jobs_${account_id}_${timestamp}.csv"
fi

# Create execution directory if it doesn't exist
mkdir -p dbt_jobs_audit

# Generate timestamp for this run
run_timestamp=$(date +"%Y-%m-%d %H:%M:%S")
timestamp=$(date +"%Y%m%d_%H%M%S")
curl_log_file="dbt_jobs_audit/curl_request_${account_id}_${timestamp}.sh"

# Cleanup function to remove temporary files
cleanup() {
  local exit_code=$?
  if [ -f "$temp_json" ]; then
    rm -f "$temp_json"
    echo "[$run_timestamp] Cleaned up temporary JSON file: $temp_json"
  fi
  exit $exit_code
}

# Set trap to ensure cleanup runs on script exit (success or failure)
trap cleanup EXIT

# Log the start of processing
echo "[$run_timestamp] Starting DBT jobs processing for account: $account_id"

# Always fetch data from API
echo "[$run_timestamp] Fetching data from DBT Cloud API..."

# Create temporary JSON file
temp_json="temp_dbt_jobs_${account_id}_${timestamp}.json"

# Store the curl command for future use
cat > "$curl_log_file" << EOF
#!/bin/bash
# DBT Cloud API request for account $account_id
# Generated on: $run_timestamp
# Usage: bash $curl_log_file

curl -H 'Accept: application/json' \\
     -H 'Authorization: Bearer $bearer_token' \\
     -X GET 'https://cloud.getdbt.com/api/v2/accounts/$account_id/jobs/' \\
     | jq '.'
EOF

chmod +x "$curl_log_file"
echo "[$run_timestamp] Stored curl command in: $curl_log_file"

# Execute the curl request
echo "[$run_timestamp] Executing API request..."
if curl -H 'Accept: application/json' \
        -H "Authorization: Bearer $bearer_token" \
        -X GET "https://cloud.getdbt.com/api/v2/accounts/$account_id/jobs/" \
        -o "$temp_json" \
        -s -w "HTTP Status: %{http_code}\nTotal Time: %{time_total}s\n"; then
  
  echo "[$run_timestamp] API request successful. Data saved to: $temp_json"
  input_file="$temp_json"
else
  echo "[$run_timestamp] ERROR: Failed to fetch data from API"
  exit 1
fi

# Write the header to the CSV file
echo "note,deactivated,id,generate_docs,environment_id,env_name,name,description,target,job_type,execute_steps,schedule" > "$output_file"

# Use jq to process the JSON and convert it to CSV
echo "[$run_timestamp] Processing JSON data with jq..."
if jq -r --argjson prod_id $PROD_ENV_ID --argjson preprod_id $PREPROD_ENV_ID '
  .data[] |
  [
    "",
    .deactivated,
    .id,
    .generate_docs,
    .environment_id,
    (if .environment_id == $prod_id then "Prod" elif .environment_id == $preprod_id then "Preprod" else "Unknown" end),
    .name,
    .description,
    .settings.target_name,
    .job_type,
    (.execute_steps | join(", ")),
    .cron_humanized
  ] | @csv
' "$input_file" >> "$output_file"; then
  
  echo "[$run_timestamp] CSV file created successfully at $output_file"
  
  # Count the number of jobs processed
  job_count=$(jq '.data | length' "$input_file")
  echo "[$run_timestamp] Processed $job_count jobs"
  
  echo "[$run_timestamp] Processing completed successfully!"
  echo "Output files:"
  echo "  CSV: $output_file"
  echo "  Curl command: $curl_log_file"
  
else
  echo "[$run_timestamp] ERROR: Failed to process JSON data with jq"
  exit 1
fi
