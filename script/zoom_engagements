#!/bin/bash
# This script will retrieve Zoom engagements using OAuth authentication
# First generates an OAuth token, then fetches engagements data

# Default configuration file path
CONFIG_FILE="zoom_config.json"

# Function to load configuration from JSON file
load_config() {
  local config_file="$1"
  if [ -f "$config_file" ]; then
    echo "Loading configuration from: $config_file"
    # Use jq to extract values and export them as environment variables
    export CLIENT_ID=$(jq -r '.client_id // empty' "$config_file" 2>/dev/null)
    export CLIENT_SECRET=$(jq -r '.client_secret // empty' "$config_file" 2>/dev/null)
    export ACCOUNT_ID=$(jq -r '.account_id // empty' "$config_file" 2>/dev/null)
    export OUTPUT_FILE=$(jq -r '.output_file // empty' "$config_file" 2>/dev/null)
    
    # Check if required values were loaded
    if [ -z "$CLIENT_ID" ] || [ -z "$CLIENT_SECRET" ] || [ -z "$ACCOUNT_ID" ]; then
      echo "ERROR: Required values 'client_id', 'client_secret', and 'account_id' not found in config file"
      exit 1
    fi
    
    echo "Configuration loaded successfully"
    return 0
  else
    return 1
  fi
}

# Function to display usage information
show_usage() {
  echo "Usage: $0 [OPTIONS]"
  echo ""
  echo "IMPORTANT: Use either a configuration file OR CLI arguments, not both."
  echo ""
  echo "Options:"
  echo "  -c, --config FILE    Use configuration file (default: $CONFIG_FILE)"
  echo "  -i, --client-id ID   Zoom OAuth client ID"
  echo "  -s, --client-secret SECRET  Zoom OAuth client secret"
  echo "  -a, --account-id ID  Zoom account ID"
  echo "  -o, --output FILE    Output CSV file"
  echo "  -h, --help           Show this help message"
  echo ""
  echo "Examples:"
  echo "  $0 -c zoom_config.json                                    # Use config file"
  echo "  $0 -i 'your_client_id' -s 'your_client_secret' -a 'your_account_id'  # Use CLI arguments"
  echo "  $0 -i 'your_client_id' -s 'your_client_secret' -a 'your_account_id' -o custom.csv"
  echo ""
  echo "Configuration file format (JSON):"
  echo "  {"
  echo "    \"client_id\": \"your_client_id_here\","
  echo "    \"client_secret\": \"your_client_secret_here\","
  echo "    \"account_id\": \"your_account_id_here\","
  echo "    \"output_file\": \"custom_output.csv\""
  echo "  }"
}

# Parse command line arguments
CLIENT_ID=""
CLIENT_SECRET=""
ACCOUNT_ID=""
OUTPUT_FILE=""
USE_CONFIG=false

while [[ $# -gt 0 ]]; do
  case $1 in
    -c|--config)
      CONFIG_FILE="$2"
      USE_CONFIG=true
      shift 2
      ;;
    -i|--client-id)
      CLIENT_ID="$2"
      shift 2
      ;;
    -s|--client-secret)
      CLIENT_SECRET="$2"
      shift 2
      ;;
    -a|--account-id)
      ACCOUNT_ID="$2"
      shift 2
      ;;
    -o|--output)
      OUTPUT_FILE="$2"
      shift 2
      ;;
    -h|--help)
      show_usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      show_usage
      exit 1
      ;;
  esac
done

# Load configuration from file if requested
if [ "$USE_CONFIG" = true ]; then
  if load_config "$CONFIG_FILE"; then
    echo "Using configuration from: $CONFIG_FILE"
  else
    echo "ERROR: Configuration file not found: $CONFIG_FILE"
    echo "Please create a valid configuration file or use CLI arguments instead."
    show_usage
    exit 1
  fi
# Check if CLI arguments were provided
elif [ -n "$CLIENT_ID" ] || [ -n "$CLIENT_SECRET" ] || [ -n "$ACCOUNT_ID" ]; then
  echo "Using CLI arguments for configuration"
  # Validate that all required CLI arguments are provided
  if [ -z "$CLIENT_ID" ] || [ -z "$CLIENT_SECRET" ] || [ -z "$ACCOUNT_ID" ]; then
    echo "ERROR: All of client_id (-i), client_secret (-s), and account_id (-a) are required when using CLI arguments"
    show_usage
    exit 1
  fi
# No configuration method specified
else
  echo "ERROR: No configuration method specified"
  echo "Please either:"
  echo "  1. Use a configuration file: $0 -c zoom_config.json"
  echo "  2. Provide CLI arguments: $0 -i <client_id> -s <client_secret> -a <account_id>"
  show_usage
  exit 1
fi

# Validate required parameters
if [ -z "$CLIENT_ID" ] || [ -z "$CLIENT_SECRET" ] || [ -z "$ACCOUNT_ID" ]; then
  echo "ERROR: All of client_id, client_secret, and account_id are required"
  show_usage
  exit 1
fi

# Set variables for use in the script
client_id="$CLIENT_ID"
client_secret="$CLIENT_SECRET"
account_id="$ACCOUNT_ID"
output_file="$OUTPUT_FILE"

# Set default output filename if not provided
if [ -z "$output_file" ]; then
  date_stamp=$(date +"%Y%m%d")
  output_file="zoom_engagements_audit/zoom_engagements_${date_stamp}.csv"
else
  # Ensure output file is in the zoom_engagements_audit directory
  if [[ "$output_file" != zoom_engagements_audit/* ]]; then
    output_file="zoom_engagements_audit/$output_file"
  fi
fi

# Create execution directory if it doesn't exist
mkdir -p zoom_engagements_audit

# Generate timestamp for this run
run_timestamp=$(date +"%Y-%m-%d %H:%M:%S")
date_stamp=$(date +"%Y%m%d")
curl_log_file="zoom_engagements_audit/curl_request_${date_stamp}.sh"

# Cleanup function to remove temporary files
cleanup() {
  local exit_code=$?
  if [ -f "$temp_oauth_json" ]; then
    rm -f "$temp_oauth_json"
    echo "[$run_timestamp] Cleaned up temporary OAuth JSON file: $temp_oauth_json"
  fi
  if [ -f "$temp_engagements_json" ]; then
    rm -f "$temp_engagements_json"
    echo "[$run_timestamp] Cleaned up temporary engagements JSON file: $temp_engagements_json"
  fi
  exit $exit_code
}

# Set trap to ensure cleanup runs on script exit (success or failure)
trap cleanup EXIT

# Log the start of processing
echo "[$run_timestamp] Starting Zoom engagements processing"

# Step 1: Generate OAuth token
echo "[$run_timestamp] Step 1: Generating OAuth token..."

# Create temporary files
temp_oauth_json="temp_zoom_oauth_${timestamp}.json"
temp_engagements_json="temp_zoom_engagements_${timestamp}.json"

# Pre-calculate the base64 encoded credentials for use in curl command generation
base64_credentials=$(echo -n "${client_id}:${client_secret}" | base64)



# We'll generate the curl commands after we have the access token

# Execute the OAuth request
echo "[$run_timestamp] Executing OAuth token request..."
if curl -d 'grant_type=account_credentials' \
        -d "account_id=$account_id" \
        -H 'Accept: application/json' \
        -H 'Content-Type: application/x-www-form-urlencoded' \
        -H "Authorization: Basic $(echo -n "${client_id}:${client_secret}" | base64)" \
        -X POST 'https://zoom.us/oauth/token' \
        -o "$temp_oauth_json" \
        -s -w "HTTP Status: %{http_code}\nTotal Time: %{time_total}s\n"; then
  
  echo "[$run_timestamp] OAuth request successful. Response saved to: $temp_oauth_json"
  
  # Extract access token from response
  access_token=$(jq -r '.access_token' "$temp_oauth_json")
  
  if [ "$access_token" != "null" ] && [ -n "$access_token" ]; then
    echo "[$run_timestamp] Access token obtained successfully"
    
    # Generate the curl commands file with the actual access token
    cat > "$curl_log_file" << EOF
#!/bin/bash
# Zoom API requests
# Generated on: $run_timestamp

# Step 1: Get OAuth token
curl -d 'grant_type=account_credentials' \\
     -d 'account_id=$account_id' \\
     -H 'Accept: application/json' \\
     -H 'Content-Type: application/x-www-form-urlencoded' \\
     -H 'Authorization: Basic $base64_credentials' \\
     -X POST 'https://zoom.us/oauth/token' \\
     | jq '.'

# Step 2: Get engagements using the actual OAuth token
curl -X GET 'https://api-us.zoom.us/v2/contact_center/engagements' \\
     -H 'Content-Type: application/json' \\
     -H 'Authorization: Bearer $access_token' \\
     | jq '.'
EOF

    chmod +x "$curl_log_file"
    echo "[$run_timestamp] Generated curl commands file with actual access token: $curl_log_file"
    
    # Step 2: Get engagements using the access token
    echo "[$run_timestamp] Step 2: Fetching engagements data..."
    
    if curl -X GET 'https://api-us.zoom.us/v2/contact_center/engagements' \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $access_token" \
            -o "$temp_engagements_json" \
            -s -w "HTTP Status: %{http_code}\nTotal Time: %{time_total}s\n"; then
      
      echo "[$run_timestamp] Engagements request successful. Data saved to: $temp_engagements_json"
      
      # Process the engagements data
      echo "[$run_timestamp] Processing engagements data..."
      
      # Check if the response contains data
      if jq -e '.engagements' "$temp_engagements_json" > /dev/null 2>&1; then
        # Write the header to the CSV file
        echo "id,name,description,status,created_at,updated_at,type,settings" > "$output_file"
        
        # Use jq to process the JSON and convert it to CSV
        if jq -r '
          .engagements[]? |
          [
            .id // "",
            .name // "",
            .description // "",
            .status // "",
            .created_at // "",
            .updated_at // "",
            .type // "",
            (.settings | tostring)
          ] | @csv
        ' "$temp_engagements_json" >> "$output_file"; then
        
          echo "[$run_timestamp] CSV file created successfully at $output_file"
          
          # Count the number of engagements processed
          engagement_count=$(jq '.engagements | length' "$temp_engagements_json" 2>/dev/null || echo "0")
          echo "[$run_timestamp] Processed $engagement_count engagements"
          
          echo "[$run_timestamp] Processing completed successfully!"
          echo "Output files:"
          echo "  CSV: $output_file"
          echo "  Curl commands: $curl_log_file"
          
        else
          echo "[$run_timestamp] ERROR: Failed to process engagements data with jq"
          exit 1
        fi
      else
        echo "[$run_timestamp] No engagements data found in response"
        echo "Response content:"
        jq '.' "$temp_engagements_json"
        exit 1
      fi
      
    else
      echo "[$run_timestamp] ERROR: Failed to fetch engagements data"
      exit 1
    fi
    
  else
    echo "[$run_timestamp] ERROR: Failed to obtain access token from OAuth response"
    echo "OAuth response content:"
    jq '.' "$temp_oauth_json"
    exit 1
  fi
  
else
  echo "[$run_timestamp] ERROR: Failed to obtain OAuth token"
  exit 1
fi
